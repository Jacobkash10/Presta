datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(cuid()) @map("_id")
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts     Account[]
  reservations Reservation[]
}

model Service {
  id           String @id @default(cuid()) @map("_id")
  name_service String
  description  String
  price        Float

  prestataireId String?
  prestataire   Provider? @relation(fields: [prestataireId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  reservations Reservation[]
}

model Category {
  id        String @id @default(cuid()) @map("_id")
  name_cate String
  image     String

  service Service[]
}

model Provider {
  id          String  @id @default(cuid()) @map("_id")
  name        String
  description String
  address     String
  email       String
  tel         String
  note        Int
  status      String?

  services  Service[]
  calendars Calendar[]
}

model Calendar {
  id         String   @id @default(cuid()) @map("_id")
  date_dispo DateTime
  time_slot  DateTime

  prestataireId String?
  prestataire   Provider? @relation(fields: [prestataireId], references: [id], onDelete: Cascade)
}

model Reservation {
  id               String   @id @default(cuid()) @map("_id")
  date_reservation DateTime

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  note      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  content   String?
  published Boolean  @default(false)
}
