datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(cuid()) @map("_id")
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  address        String?
  phone          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts     Account[]
  reservations Reservation[]
  comment      Comment[]
}

model Service {
  id           String @id @default(cuid()) @map("_id")
  slug         String @unique
  name_service String
  description  String
  price        Float

  categorySlug String?
  category     Category? @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)

  provider     Provider[]
  reservations Reservation[]
}

model Category {
  id        String @id @default(cuid()) @map("_id")
  slug      String @unique
  name_cate String
  image     String

  prestataire Provider[]
  service     Service[]
}

model Provider {
  id          String  @id @default(cuid()) @map("_id")
  slug        String  @unique
  name        String
  description String
  address     String
  email       String
  password    String?
  tel         String
  note        Int?
  image       String?
  status      String?
  diplome     String?
  language    String?
  exp         String?
  commitment  String?

  categorySlug String?
  category     Category? @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)

  serviceSlug String?
  service     Service? @relation(fields: [serviceSlug], references: [slug], onDelete: Cascade)

  calendars   Calendar[]
  reservation Reservation[]
  comments    Comment[]
}

model Calendar {
  id         String   @id @default(cuid()) @map("_id")
  slug       String   @unique
  date_dispo DateTime
  time_slot  DateTime

  prestataireSlug String?
  prestataire     Provider? @relation(fields: [prestataireSlug], references: [slug], onDelete: Cascade)
}

model Reservation {
  id               String   @id @default(cuid()) @map("_id")
  slug             String?  @unique
  special          String?
  date_reservation DateTime
  hour             DateTime
  address          String
  tel              String
  description      String?

  userEmail String?
  user      User?   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  prestataireSlug String?
  prestataire     Provider? @relation(fields: [prestataireSlug], references: [slug], onDelete: Cascade)

  serviceSlug String?
  service     Service? @relation(fields: [serviceSlug], references: [slug], onDelete: Cascade)

  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  note      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userEmail String?
  user      User?   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  reservationSlug String?
  reservation     Reservation? @relation(fields: [reservationSlug], references: [slug], onDelete: Cascade)

  prestataireSlug String?
  prestataire     Provider? @relation(fields: [prestataireSlug], references: [slug], onDelete: Cascade)
}

model Post {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  content   String?
  published Boolean  @default(false)
}
